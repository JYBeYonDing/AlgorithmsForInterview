import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Stack;//leetcode submit region begin(Prohibit modification and deletion)class Solution {    public int[] twoSum(int[] nums, int target) {        Map<Integer, Stack<Integer>> map = new HashMap<>();        for (int i = 0; i < nums.length; i++) {            Stack<Integer> list = map.getOrDefault(nums[i], new Stack<>());            list.push(i);            map.put(nums[i], list);        }        int left=0;        int right =nums.length-1;        Arrays.sort(nums);        while (left < right) {            int tmp = nums[left] + nums[right];            if (tmp == target) {                break;            }            if (tmp < target) {                left++;            } else if (tmp > target) {                right--;            }        }        return new int[]{map.get(nums[left]).pop(),map.get(nums[right]).pop()};    }}//leetcode submit region end(Prohibit modification and deletion)